version: '3.4'

services:
  php:
    build:
      context: .
      dockerfile: ./docker/php/Dockerfile
      cache_from:
        - ./docker/php
    depends_on:
      - db
    env_file:
      - .env
    # Comment out these volumes in production
    volumes:
      - .:/srv/mh-shop:rw,cached
      - ./docker/php/php.ini:/usr/local/etc/php/conf.d/php.ini:ro
      # If you develop on Linux, uncomment the following line to use a bind-mounted host directory instead
      # - ./api/var:/srv/api/var:rw

  nginx:
    image: nginx:alpine
    depends_on:
      - php
    volumes:
      - ./docker/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./public:/usr/src/public
      - ./logs/nginx/:/var/log/nginx:cached
    ports:
      - 443:443

  cache-proxy:
    build:
      context: .
      dockerfile: ./docker/varnish/Dockerfile
      cache_from:
        - ./docker/varnish
    depends_on:
      - nginx
    # Comment out this volume in production
    volumes:
      - ./docker/varnish/conf:/etc/varnish:ro
    ports:
      - "8081:80"

  db:
    # In production, you may want to use a managed database service
    image: postgres:10-alpine
    env_file: .env
    environment:
      POSTGRES_DB: mh-shop
      POSTGRES_USER: root
      # You should definitely change the password in production
      POSTGRES_PASSWORD: root
    volumes:
      - db-data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      - ./docker/db/data:/var/lib/postgresql/data:rw
    ports:
      - "5432:5432"

volumes:
  db-data: {}
